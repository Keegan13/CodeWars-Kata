namespace KataCSharp.Fabergè_Easter_Eggs_crush_test
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Numerics;
    public class Faberge
    {
        public static BigInteger Height(int n, int m)
        {
            if (n == 0 || m == 0) return 0;
            if (n == 1) return m;
            BigInteger[] Prev = Enumerable.Range(1, m - n+1).Select(x => (BigInteger)x).ToArray();
            BigInteger sum = 1;
            var startSum = Seed().GetEnumerator();
            startSum.MoveNext();
            startSum.MoveNext();
            BigInteger[] Next = null;
            for (int i = 2; i < n; i++)
            {
                Next = new BigInteger[m - n+1];
                Next[0] = startSum.Current;
                sum = Prev[0];
                for (int j = 1; j < Next.Length; j++)
                {
                    sum += Prev[j];
                    Next[j] = sum + j + i ;
                }
                Prev = Next;
                //Console.WriteLine(Next.Aggregate("", (a, next) => a += " " + next.ToString()));
                startSum.MoveNext();
            }
            return Next.Aggregate(new BigInteger(0), (agg, next) => agg += next)+m;
        }
        private static IEnumerable<BigInteger> Seed()
        {
            BigInteger val = 0;
            int i = 1;
            while (true) yield return val = val * 2 + i++;
        }
    }
    public static class Entry
    {
        public static void Run()
        {
            //int N = 3;
            //int M = 5;
            ////for (int i = 1; i < M; i++)
            ////{
            ////    var prev = new BigInteger[N];
            ////    for (int j = 1; j <= N; j++)
            ////    {
            ////        prev[j - 1] = Faberge.H(j, i);
            ////    }
            ////    Console.WriteLine(prev.Aggregate("", (agg, next) => agg += "\t" + next.ToString()));
            ////}

            //Console.WriteLine("New {0}", Faberge.H(N, M));
            Test();
        }
        public static void Test()
        {
            //Console.WriteLine("H({0},{1})={2} should {3}", 3, 5, Faberge.H(3, 5), 25);
            //Console.WriteLine("H({0},{1})={2} should {3}", 2, 14, Faberge.H(2, 14), 105);
            var x = Faberge.Height(9477, 10000);
            var should = BigInteger.Parse("19950631168807583848837421626835850838234968318861924548520089498529438830221946631919961684036194597899331129423209124271556491349413781117593785932096323957855730046793794526765246551266059895520550086918193311542508608460618104685509074866089624888090489894838009253941633257850621568309473902556912388065225096643874441046759871626985453222868538161694315775629640762836880760732228535091641476183956381458969463899410840960536267821064621427333394036525565649530603142680234969400335934316651459297773279665775606172582031407994198179607378245683762280037302885487251900834464581454650557929601414833921615734588139257095379769119277800826957735674444123062018757836325502728323789270710373802866393031428133241401624195671690574061419654342324638801248856147305207431992259611796250130992860241708340807605932320161268492288496255841312844061536738951487114256315111089745514203313820202931640957596464756010405845841566072044962867016515061920631004186422275908670900574606417856951911456055068251250406007519842261898059237118054444788072906395242548339221982707404473162376760846613033778706039803413197133493654622700563169937455508241780972810983291314403571877524768509857276937926433221599399876886660808368837838027643282775172273657572744784112294389733810861607423253291974813120197604178281965697475898164531258434135959862784130128185406283476649088690521047580882615823961985770122407044330583075869039319604603404973156583208672105913300903752823415539745394397715257455290510212310947321610753474825740775273986348298498340756937955646638621874569499279016572103701364433135817214311791398222983845847334440270964182851005072927748364550578634501100852987812389473928699540834346158807043959118985815145779177143619698728131459483783202081474982171858011389071228250905826817436220577475921417653715687725614904582904992461028630081535583308130101987675856234343538955409175623400844887526162643568648833519463720377293240094456246923254350400678027273837755376406726898636241037491410966718557050759098100246789880178271925953381282421954028302759408448955014676668389697996886241636313376393903373453647052103349469928076954249980154345544196049720110441880956939571653303125965015135210943821418326301263747755849915390311849600620405839184806696574011638771223876684308393546154357007879197176278577010897776871509293312271446308325915207411683581162864877565099831828100966285215817182861422299916721214461558309048173509038700144141092935627106729962305873603830938160653941875633254649208486247541063094454500007666144426589865904402944100565434252161641454059574448959059378469034843694065251975339636452128242737679086169540365161261103781301842588718151775952124493692901275351280453566829099730411742607415703660912889996893392281666409912913934377489142688784235343954049469043333120897248862080530937185907276885584072254792345533781517753151320818102507950307194516201547412495983145614252402137833853984659077543542376699008277188650448599930163536123001047126485885945475644");

            if (x == should)
                Console.WriteLine("Ok");
            else
            {
                Console.WriteLine("Evaluated: {0}", x.ToString());
                Console.WriteLine("Expected: {0}", should.ToString());
            }

        }
    }
}
